#tag SYSTEM_LIB // Not really needed, system lib is always included.
// #tag STRICT // Checks if methods, vars, and special statements are valid.
// #tag LOOSE Doesn't care, try's to compile no matter what.

// Probably not going to use these tags.
// #tag INCLUDE Includes other file in this file and compiles. 
// #tag LINK Links the compiled other file to this file.
//import Basic.simple;
//import okay/RealBasic.simple

// Comment
// Order of methods should not matter.

// Global Vars
// Must use static if the var is not in a method.
static int HELLO = 0;
final static string QW = "20";

// Not valid, all finals must be declared.
// final static string LAL;

// Not valid, finals cannot be from a method.
// final static int TEST_ADD = Basic.add(2, 3);

#tag ENTRY { // #tag Entry == void main()
    /*int keke = 23;


    */

    meme();
	
	assert(true);

    #tag ENTRY_STRING // == final String ENTRY_STRING = entry vars;
    string startString = "";

	final int ree = 2;
    int what = 23;
    System.print(what);

    //System.println(Basic.add(2, 3));
	
	int 11 = 2 % 2 * 2 / 2 + 2 - 2;
	
	// Do I really want this??
	//int ted = {
	//	return 0;
	//};
	
	assert(true);
	
	Basic.killer;
	
	float f = (float) "2.0";
	float[] arr = new float[2];
	float[] arr2 = { 2, 2 };
	
	(float, int) tup = (2, 2);
	
	// I have no null!
	string tween; // This is equal to "", since simple script doesn't allow for nulls.
	int 23334; // This is valid and inits the var to 0.
	
	System.println(tween);
}

void prims() {
	/*
	char = '0'
	string = ""
	
	int8 = 0
	int16 = 0
	int == int32 = 0
	int64 = 0
	
	float32 = 0.0
	float == float64 = 0.0
	
	byte = 0
	boolean = false
	
	object -> Any prim type, except void. = 0
	void -> No return! Cannot be used in statements.
	
	arrays for all types;
	float[] arr = new float[2];
	float[] arr2 = { 2, 2 };
	
	tuples
	(float, int) tup = (2, 2);
	(float, int, string) tup2 = (2, 2, "string");
	*/
}

int meme() {
	/*
	LATER!!!
	lamdas?
	(NO VARS FOR NOW!) -> {
		// I can edit vars outside my scope.
	}
	*/

    return -1;
}